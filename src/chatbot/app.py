"""
Chatbot para intera√ß√£o com o sistema de predi√ß√£o de projetos
"""
import streamlit as st
import pandas as pd
import requests
from datetime import datetime, date, timedelta
import json
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Assistente de Projetos",
    page_icon="ü§ñ",
    layout="wide"
)

# URL da API
API_URL = "http://localhost:8000"

# Carregar base de usu√°rios
@st.cache_data
def carregar_usuarios():
    """Carrega a base de dados de usu√°rios"""
    try:
        df = pd.read_csv('data/usuarios.csv')
        return df
    except:
        st.error("‚ùå Erro ao carregar base de usu√°rios")
        return pd.DataFrame()

# Verificar status da API
def verificar_api():
    """Verifica se a API est√° online"""
    try:
        response = requests.get(f"{API_URL}/health", timeout=2)
        return response.status_code == 200
    except:
        return False

# Obter op√ß√µes v√°lidas da API
@st.cache_data(ttl=3600)
def obter_opcoes():
    """Obt√©m as op√ß√µes v√°lidas dos endpoints da API"""
    opcoes = {}
    endpoints = {
        'project_types': 'project-types',
        'regions': 'regions',
        'departments': 'departments',
        'complexities': 'complexities',
        'phases': 'phases'
    }

    for key, endpoint in endpoints.items():
        try:
            response = requests.get(f"{API_URL}/{endpoint}")
            if response.status_code == 200:
                data = response.json()
                opcoes[key] = list(data.values())[0]
            else:
                opcoes[key] = []
        except:
            opcoes[key] = []

    return opcoes

# Inicializar estado da sess√£o
if 'mensagens' not in st.session_state:
    st.session_state.mensagens = []
    st.session_state.usuario_selecionado = None
    st.session_state.projeto_analisado = {}  # Mudan√ßa: renomeado para evitar conflito
    st.session_state.etapa = 'inicio'

# T√≠tulo e descri√ß√£o
st.title("ü§ñ Assistente de An√°lise de Projetos")
st.markdown("Ol√°! Sou seu assistente para prever o sucesso de projetos. Vamos come√ßar?")

# Sidebar com informa√ß√µes
with st.sidebar:
    st.header("üìä Informa√ß√µes")

    # Status da API
    api_online = verificar_api()
    if api_online:
        st.success("‚úÖ Sistema Online")
    else:
        st.error("‚ùå API Offline")
        st.info("Execute: `uv run uvicorn src.api.main:app --reload`")

    # Usu√°rio selecionado
    st.divider()
    st.subheader("üë§ Usu√°rio")

    usuarios_df = carregar_usuarios()
    if not usuarios_df.empty:
        usuario_nome = st.selectbox(
            "Selecione seu perfil:",
            options=usuarios_df['Nome'].tolist(),
            index=0 if st.session_state.usuario_selecionado is None else None
        )

        filtro = usuarios_df[usuarios_df['Nome'] == usuario_nome]
        if not filtro.empty:
            usuario_info = filtro.iloc[0]
            st.session_state.usuario_selecionado = usuario_info.to_dict()

            st.info(f"**Cargo:** {usuario_info['Cargo']}")
            st.info(f"**Experi√™ncia:** {usuario_info['Experiencia_Anos']} anos")
            st.info(f"**Taxa de Sucesso:** {usuario_info['Taxa_Sucesso']:.0%}")
        else:
            st.warning(f"Usu√°rio '{usuario_nome}' n√£o encontrado.")

    # Bot√£o para limpar conversa
    st.divider()
    if st.button("üîÑ Nova An√°lise", use_container_width=True):
        st.session_state.mensagens = []
        st.session_state.projeto_analisado = {}
        st.session_state.etapa = 'inicio'
        st.rerun()

# Fun√ß√£o para adicionar mensagem
def adicionar_mensagem(role, content):
    st.session_state.mensagens.append({"role": role, "content": content})

# Fun√ß√£o para coletar dados do projeto
def coletar_dados_projeto():
    """Interface para coletar dados do projeto"""
    opcoes = obter_opcoes()

    with st.form("form_dados_projeto"):  # Mudan√ßa: chave √∫nica para o form
        st.subheader("üìã Dados do Projeto")

        col1, col2 = st.columns(2)

        with col1:
            nome_projeto = st.text_input("Nome do Projeto")
            custo = st.number_input(
                "Custo do Projeto (R$)", 
                min_value=1000.0,
                value=10000.0,
                step=10000.0
            )
            beneficio = st.number_input(
                "Benef√≠cio Esperado (R$)", 
                min_value=1000.0,
                value=150000.0,
                step=10000.0
            )

            tipo = st.selectbox(
                "Tipo do Projeto",
                options=opcoes.get('project_types', [])
            )

            regiao = st.selectbox(
                "Regi√£o",
                options=opcoes.get('regions', [])
            )

        with col2:
            departamento = st.selectbox(
                "Departamento",
                options=opcoes.get('departments', [])
            )

            complexidade = st.selectbox(
                "Complexidade",
                options=opcoes.get('complexities', [])
            )

            fase = st.selectbox(
                "Fase Atual",
                options=opcoes.get('phases', [])
            )

            col_data1, col_data2 = st.columns(2)
            with col_data1:
                data_inicio = st.date_input(
                    "Data de In√≠cio",
                    value=date.today()
                )
            with col_data2:
                data_fim = st.date_input(
                    "Data de T√©rmino",
                    value=date.today() + timedelta(days=180)
                )

            conclusao = st.slider(
                "% de Conclus√£o",
                min_value=0,
                max_value=100,
                value=0
            )

        submitted = st.form_submit_button("Analisar Projeto", use_container_width=True, type="primary")

        if submitted:
            # Validar datas
            if data_fim <= data_inicio:
                st.error("‚ùå A data de t√©rmino deve ser posterior √† data de in√≠cio!")
                return False

            # Salvar dados no session_state com chave diferente
            st.session_state.projeto_analisado = {
                "nome": nome_projeto,
                "project_cost": custo,
                "project_benefit": beneficio,
                "start_date": data_inicio.strftime("%Y-%m-%d"),
                "end_date": data_fim.strftime("%Y-%m-%d"),
                "project_type": tipo,
                "region": regiao,
                "department": departamento,
                "complexity": complexidade,
                "phase": fase,
                "completion": conclusao / 100.0
            }

            return True

    return False

# Fun√ß√£o para fazer predi√ß√£o
def fazer_predicao(dados_projeto):
    """Chama a API para fazer a predi√ß√£o"""
    try:
        # Preparar dados para API (remover campo 'nome')
        dados_api = {k: v for k, v in dados_projeto.items() if k != 'nome'}

        response = requests.post(
            f"{API_URL}/predict",
            json=dados_api,
            headers={"Content-Type": "application/json"}
        )

        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"‚ùå Erro na API: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"‚ùå Erro ao conectar com a API: {str(e)}")
        return None

# Fun√ß√£o para gerar an√°lise personalizada
def gerar_analise_personalizada(resultado, dados_projeto, usuario):
    """Gera uma an√°lise personalizada combinando resultado e perfil do usu√°rio"""

    analise = f"""
## üìä An√°lise do Projeto: {dados_projeto.get('nome', 'Novo Projeto')}

Com base na minha an√°lise e considerando seu perfil como **{usuario['Cargo']}** 
com **{usuario['Experiencia_Anos']} anos de experi√™ncia** e uma taxa de sucesso 
hist√≥rica de **{usuario['Taxa_Sucesso']:.0%}**, aqui est√° minha avalia√ß√£o:

### üéØ Predi√ß√£o
- **Probabilidade de Sucesso:** {resultado['probabilidade_sucesso']:.1%}
- **N√≠vel de Confian√ßa:** {resultado['confianca']:.1%}
- **ROI Esperado:** {resultado['roi_esperado']:.1%}

### üí° Recomenda√ß√µes Personalizadas
"""

    # Adicionar recomenda√ß√µes do modelo
    for rec in resultado['recomendacoes']:
        analise += f"\n{rec}\n"

    # Adicionar recomenda√ß√µes baseadas no perfil do usu√°rio
    if usuario['Taxa_Sucesso'] > resultado['probabilidade_sucesso']:
        analise += f"""
\nüìå **Nota especial para voc√™:** Sua taxa de sucesso hist√≥rica 
({usuario['Taxa_Sucesso']:.0%}) √© superior √† probabilidade prevista para este projeto. 
Isso pode indicar que sua experi√™ncia pode fazer a diferen√ßa!
"""

    # Recomenda√ß√µes por departamento
    if usuario['Departamento'] == dados_projeto['department']:
        analise += f"""
\n‚úÖ **Alinhamento departamental:** O projeto est√° alinhado com sua √°rea 
({usuario['Departamento']}), o que pode aumentar as chances de sucesso.
"""

    # Recomenda√ß√µes por especialidade
    if usuario['Especialidade'] == dados_projeto['project_type']:
        analise += f"""
\nüéØ **Especialidade matching:** Este projeto est√° na sua √°rea de especialidade 
({usuario['Especialidade']}), aproveitando sua expertise!
"""

    return analise

# Interface principal do chat
container_chat = st.container()

with container_chat:
    # Mostrar mensagens anteriores
    for msg in st.session_state.mensagens:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # L√≥gica do chatbot
    if st.session_state.etapa == 'inicio' and len(st.session_state.mensagens) == 0:
        adicionar_mensagem(
            "assistant",
            f"""üëã Ol√°, {st.session_state.usuario_selecionado['Nome'] if st.session_state.usuario_selecionado else 'usu√°rio'}!

Sou seu assistente de an√°lise de projetos. Posso ajud√°-lo a prever o sucesso de seus projetos 
usando intelig√™ncia artificial.

Para come√ßar, clique no bot√£o abaixo para inserir os dados do seu projeto."""
        )
        st.rerun()

    # √Årea de entrada de dados
    if st.session_state.etapa == 'inicio':
        if coletar_dados_projeto():
            st.session_state.etapa = 'analisando'
            adicionar_mensagem("user", f"Analisar projeto: {st.session_state.projeto_analisado.get('nome', 'Novo Projeto')}")
            st.rerun()

    # Fazer an√°lise
    elif st.session_state.etapa == 'analisando':
        with st.spinner("üîç Analisando projeto..."):
            resultado = fazer_predicao(st.session_state.projeto_analisado)

        if resultado:
            analise = gerar_analise_personalizada(
                resultado,
                st.session_state.projeto_analisado,
                st.session_state.usuario_selecionado
            )

            adicionar_mensagem("assistant", analise)
            st.session_state.etapa = 'concluido'
            st.rerun()
        else:
            adicionar_mensagem("assistant", "‚ùå N√£o consegui analisar o projeto. Verifique se a API est√° online.")
            st.session_state.etapa = 'inicio'
            st.rerun()

    # Op√ß√µes ap√≥s an√°lise
    elif st.session_state.etapa == 'concluido':
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üìä Analisar Outro Projeto", use_container_width=True):
                adicionar_mensagem("user", "Quero analisar outro projeto")
                adicionar_mensagem("assistant", "Claro! Vamos analisar outro projeto. Por favor, preencha os dados:")
                st.session_state.projeto_analisado = {}
                st.session_state.etapa = 'inicio'
                st.rerun()

        with col2:
            if st.button("üìà Ver Compara√ß√£o", use_container_width=True):
                adicionar_mensagem("assistant", """
üöß **Funcionalidade em desenvolvimento!** 

Em breve voc√™ poder√° comparar m√∫ltiplos projetos e ver an√°lises comparativas.
""")
                st.rerun()

        with col3:
            if st.button("üíæ Exportar An√°lise", use_container_width=True):
                adicionar_mensagem("assistant", """
üìÑ **Exporta√ß√£o dispon√≠vel em breve!**

Voc√™ poder√° exportar a an√°lise em PDF ou Excel.
""")
                st.rerun()

# Footer
st.divider()
st.caption("ü§ñ Assistente de Projetos v1.0 | Powered by Machine Learning")
